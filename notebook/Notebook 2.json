{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Capstone",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a87e3151-321e-477d-a391-4e57306af36e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
				"name": "Capstone",
				"type": "Spark",
				"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 5
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/applications.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"##display(df.limit(10))"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"dg = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/CohortTable.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"##display(dg.limit(10))"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df = df.withColumn(\"Job\",translate(col(\"Job\"),\"/–!-() \",\"\")) \r\n",
					"display(df.limit(5))\r\n",
					"\r\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"dg = dg.withColumn(\"Job\",translate(col(\"Job\"),\"/–!-() \",\"\")) \\\r\n",
					"        .withColumn(\"CohortName\", (col(\"CohortName\"), \"\"))\r\n",
					"\r\n",
					"display(dg.limit(5))\r\n",
					"\r\n",
					""
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"ds = df.join(dg,df.Job==dg.Job,\"inner\")\r\n",
					"display(ds)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"import pyspark.sql.functions as talent\r\n",
					"\r\n",
					"ds = ds.withColumn(\"TrackerType\",  \r\n",
					"talent.when((talent.col(\"Stage\") == \"Sourced\") | (talent.col(\"Stage\") == \"Applied\" ) , \"Reach\")\r\n",
					".when((talent.col(\"Stage\") == \"Screen\") | (talent.col(\"Stage\") == \"OfferToClient\"  ), \"Test\") \r\n",
					".when((talent.col(\"Stage\") == \"Interview\"  ), \"Interview\") \r\n",
					".when((talent.col(\"Stage\") == \"Shortlisted\") | (talent.col(\"Stage\") == \"Offer\"  ), \"Offer\") \r\n",
					".when((talent.col(\"Stage\") == \"Hired\"), \"Conversion\") \r\n",
					".otherwise(\"\"))\r\n",
					"\r\n",
					"display(df.limit(5))\r\n",
					"\r\n",
					"##df.write.save(\"capstone.applications\")\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"ds = ds.withColumn(\"Reach\", when((col(\"TrackerType\") == \"Reach\") & (col(\"CohortName\") <> \" \"), \"1\").otherwise(\"0\")) \\\r\n",
					".withColumn(\"Test\", when((col(\"TrackerType\") == \"Test\") & (col(\"CohortName\") <> \" \"), \"1\").otherwise(\"0\")) \\ \r\n",
					".withColumn(\"Interview\", when((col(\"TrackerType\") == \"Interview\") & (col(\"CohortName\") <> \" \"), \"1\").otherwise(\"0\")) \\\r\n",
					".withColumn(\"Offer\", when((col(\"TrackerType\") == \"Offer\") & (col(\"CohortName\") <> \" \"), \"1\").otherwise(\"0\")) \\\r\n",
					".withColumn(\"Conversion\", when((col(\"TrackerType\") == \"Conversion\") & (col(\"CohortName\") <> \" \"), \"1\").otherwise(\"0\")) \\\r\n",
					".otherwise(\"0\"))\r\n",
					"\r\n",
					"##.withColumn(\"WeekNumber\", Week.weekofyear(\"AppliedOrSourcedDate\"))\r\n",
					"\r\n",
					"##import pyspark.sql.functions as to_timestamp\r\n",
					"##import pyspark.sql.functions as date_format\r\n",
					"##import pyspark.sql.functions as Year\r\n",
					"\r\n",
					"##df = df.withColumn(\"YearApplied\", Year.year(\"AppliedOrSourcedDate\"))\r\n",
					"\r\n",
					"##df= df.withColumn(\"birthday\",to_timestamp(Year(\"AppliedOrSourcedDate\"))\r\n",
					"##.withColumn(\"year\", date_format(Year(\"AppliedOrSourcedDate\"), \"Y\")))\r\n",
					"\r\n",
					"\r\n",
					"display(df.limit(5))"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df = df.withColumn(\"Year\", year(to_date(df.AppliedOrSourcedDate,\"M/d/y\")))\r\n",
					"display(df.limit(5))"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.repartition(1)\r\n",
					"df.write.mode(\"overwrite\"). \\\r\n",
					"saveAsTable(\"capstone.applications\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DROP TABLE capstone.applications"
				],
				"execution_count": 9
			}
		]
	}
}
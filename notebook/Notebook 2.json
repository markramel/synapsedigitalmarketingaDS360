{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Capstone",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1adf6176-e915-457d-abc0-041441d72bd5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
				"name": "Capstone",
				"type": "Spark",
				"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 5
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/applications.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"##display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"dg = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortTableList.parquet', format='parquet')\r\n",
					"dg = dg.drop('Title')\r\n",
					"## If header exists uncomment line below\r\n",
					"##, header=True\r\n",
					"##)\r\n",
					"##display(dg.limit(5))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"dh = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortForm.parquet', format='parquet')\r\n",
					"## If header exists uncomment line below\r\n",
					"##, header=True\r\n",
					"##)\r\n",
					"##display(dg.limit(10))"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
					"## If header exists uncomment line below\r\n",
					"##, header=True\r\n",
					"##)\r\n",
					"##display(dg.limit(10))"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df = df.withColumn(\"Job\",translate(col(\"Job\"),\"./–!-() \",\"\")) \r\n",
					"##display(df.limit(5))\r\n",
					"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"dg = dg.withColumn(\"Job\",translate(col(\"JobDescription\"),\"./–!-() \",\"\")) \r\n",
					"\r\n",
					"##display(dg.limit(5))\r\n",
					"\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df = df.withColumn(\"Year\", year(to_date(df.AppliedOrSourcedDate,\"M/d/y\"))) \\\r\n",
					".withColumn(\"Week\", weekofyear(to_date(df.AppliedOrSourcedDate, \"M/d/y\")))\r\n",
					"\r\n",
					"display(df.limit(5))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"da = dg.join(dh,dg.CohortNameId== dh.Id,\"inner\")\r\n",
					"ds = df.join(da,df.Job==da.JobDescription,\"inner\")\r\n",
					"display(ds.limit(5))"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ds = df.join(dg,df.Job==dg.JobDescription,\"outer\")\r\n",
					"display(ds.limit(5))"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##outer join applications table and Cohort Form for Job column\r\n",
					"ds=df.join(dg,on=\"Job\",how=\"outer\")\r\n",
					"display(ds.limit(5))"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##%%pyspark\r\n",
					"##import pyspark.sql.functions as talent\r\n",
					"\r\n",
					"##ds = ds.withColumn(\"TrackerType\",  \r\n",
					"##talent.when((talent.col(\"Stage\") == \"Sourced\") | (talent.col(\"Stage\") == \"Applied\" ) , \"Reach\")\r\n",
					"##.when((talent.col(\"Stage\") == \"Screen\") | (talent.col(\"Stage\") == \"Assessment\"  ), \"Test\") \r\n",
					"##.when((talent.col(\"Stage\") == \"Interview\"  ), \"Interview\") \r\n",
					"##.when((talent.col(\"Stage\") == \"Shortlisted\") | (talent.col(\"Stage\") == \"Offer\"  ), \"Offer\") \r\n",
					"##.when((talent.col(\"Stage\") == \"Hired\"), \"Conversion\") \r\n",
					"##.otherwise(\"\"))\r\n",
					"\r\n",
					"##display(ds.limit(5))\r\n",
					"\r\n",
					"##df.write.save(\"capstone.applications\")\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"ds = ds.withColumn(\"TrackerType\", when((ds.Stage == \"Sourced\") | (ds.Stage == \"Applied\") , \"Reach\")\r\n",
					".when((ds.Stage == \"Screen\") | (ds.Stage == \"Assessment\"), \"Test\") \r\n",
					".when((ds.Stage == \"Interview\"), \"Interview\") \r\n",
					".when((ds.Stage == \"Shortlisted\") | (ds.Stage == \"Offer\"), \"Offer\") \r\n",
					".when((ds.Stage == \"Hired\"), \"Conversion\") \r\n",
					".otherwise(\"\"))\r\n",
					"\r\n",
					"display(ds.limit(5))\r\n",
					"\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"ds = ds.withColumn(\"Reach\", when((ds.TrackerType == \"Reach\") & (ds.Title.isNotNull()) , \"1\").otherwise(\"0\")) \\\r\n",
					".withColumn(\"Test\", when((ds.TrackerType == \"Test\") & (ds.Title.isNotNull()) , \"1\").otherwise(\"0\")) \\\r\n",
					".withColumn(\"Interview\", when((ds.TrackerType == \"Interview\") & (ds.Title.isNotNull()) , \"1\").otherwise(\"0\")) \\\r\n",
					".withColumn(\"Offer\", when((ds.TrackerType == \"Offer\") & (ds.Title.isNotNull()) , \"1\").otherwise(\"0\")) \\\r\n",
					".withColumn(\"Conversion\", when((ds.TrackerType == \"Conversion\") & (ds.Title.isNotNull()) , \"1\").otherwise(\"0\")) \\\r\n",
					"\r\n",
					"display(ds.limit(5))"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ds = ds.drop('complianceassetid','contenttype','contenttypeid','created', \\\r\n",
					"'createdbyid','id', 'modified','modifiedbyid','owshiddenversion', 'path','version','job' )\r\n",
					"ds = ds.distinct()\r\n",
					"ds = ds.repartition(1)\r\n",
					"ds.write.mode(\"overwrite\") \\\r\n",
					".saveAsTable(\"capstone.applications\")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dg.write.mode(\"overwrite\") \\\r\n",
					".saveAsTable(\"capstone.CohortTableList\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dh.write.mode(\"overwrite\") \\\r\n",
					".saveAsTable(\"capstone.CohortForm\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dj.write.mode(\"overwrite\") \\\r\n",
					".saveAsTable(\"capstone.TalentList\")"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##ds = ds.repartition(1)\r\n",
					"##ds.write.mode(\"overwrite\").parquet(\"/capstone/output/tblapplications\")"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"##%%sql\r\n",
					"##DROP TABLE capstone.applications"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"##Drop  table in the default database\r\n",
					"##%%sql\r\n",
					"##DROP TABLE applications"
				],
				"execution_count": 32
			}
		]
	}
}
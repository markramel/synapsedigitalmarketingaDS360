{
	"name": "GecoProject_CandidateStageHistory",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Capstone",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c3323320-0b8d-4c47-86f5-66e29b8976c4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
				"name": "Capstone",
				"type": "Spark",
				"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 5
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"#Load to Dataframe (CSV)\r\n",
					"df_app = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Application.csv', format='csv', header=True).distinct()\r\n",
					"df_candidate = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Candidate.csv', format='csv', header=True).distinct()\r\n",
					"df_department = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Department.csv', format='csv', header=True).distinct()\r\n",
					"df_job = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Job.csv', format='csv', header=True).distinct()\r\n",
					"df_joblist = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/JobList.csv', format='csv', header=True).distinct()\r\n",
					"df_stage = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Stage.csv', format='csv', header=True).distinct()\r\n",
					"\r\n",
					"#Load to Dataframe (Parquet)\r\n",
					"df_canstghist = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/dbo.CandidateHistoryWebHook.parquet', format='parquet', header=True).distinct()\r\n",
					"\r\n",
					"#Change 'undefined' to empty space\r\n",
					"df_app = df_app.fillna(value = \"\")\r\n",
					"df_candidate = df_candidate.fillna(value = \"\")\r\n",
					"df_department = df_department.fillna(value = \"\")\r\n",
					"df_job = df_job.fillna(value = \"\")\r\n",
					"df_joblist = df_joblist.fillna(value = \"\")\r\n",
					"df_stage = df_stage.fillna(value = \"\")\r\n",
					"df_canstghist = df_canstghist.fillna(value = \"\")\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"#Applications + Stage\r\n",
					"\r\n",
					"df_appStage = df_app.join(df_stage, [df_stage['Id'] == df_app ['stageId'], df_stage['applicationId'] == df_app ['id']], 'left') \\\r\n",
					"    .select(df_app['Id'], df_app['candidateId'], df_app['stageId'], col('type').alias('stage'), 'jobId')\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"#AppStage + Job\r\n",
					"\r\n",
					"df_appstJob = df_appStage.join(df_joblist, [df_joblist['Id'] == df_appStage['jobId']], 'left') \\\r\n",
					"    .select(df_appStage['Id'], df_appStage['candidateId'], 'stageId', 'stage', df_joblist['departmentId'])\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"#AppStageJob + Department\r\n",
					"\r\n",
					"df_appstjobDept = df_appstJob.join(df_department, [df_department['Id'] == df_appstJob['departmentId']], 'left') \\\r\n",
					"    .select(df_appStage['Id'], df_appStage['candidateId'], 'stageId', 'stage', col('name').alias('department'))\r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"#AppStageJobDepartment + Candidate\r\n",
					"\r\n",
					"df_appCandidate = df_appstjobDept.join(df_candidate, [df_candidate['Id'] == df_appstjobDept['candidateId']], 'left') \\\r\n",
					"    .select(df_appStage['Id'].alias('applicationId'), 'candidateId'\r\n",
					"        , 'stageId', 'stage', col('department').alias('jobDepartment'))\r\n",
					"\r\n",
					"#Remove undefined\r\n",
					"df_appCandidate = df_appCandidate.fillna(value = \"\")\r\n",
					"\r\n",
					"#Add offer columns\r\n",
					"df_appCandidate = df_appCandidate.withColumn(\"softOffer\", lit(False))\r\n",
					"df_appCandidate = df_appCandidate.withColumn(\"hardOffer\", lit(False))\r\n",
					"\r\n",
					"stageList = [75570, 75570]\r\n",
					"\r\n",
					"df_appCandidate = df_appCandidate.filter(df_appCandidate['stageID'].isin(stageList))\r\n",
					"\r\n",
					"#display(df_appCandidate.limit(10))\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Save to Table\r\n",
					"df_appCandidate.write.mode(\"overwrite\").saveAsTable(\"gecoproject.candidateStageHistory\")\r\n",
					"\r\n",
					"#Save to CSV\r\n",
					"df_appCandidate = df_appCandidate.repartition(1)\r\n",
					"df_appCandidate.write.mode('overwrite').option(\"header\", True).csv(\"/capstone/GecoAPI/Output\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 11
			}
		]
	}
}
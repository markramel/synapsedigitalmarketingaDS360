{
	"name": "RomanNotebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Capstone",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3477e983-6da9-4034-8047-bfefc15bd13e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
				"name": "Capstone",
				"type": "Spark",
				"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/applications.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True)\r\n",
					"ctl_tbl = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortTableList.parquet', format='parquet')\r\n",
					"cfrm_tbl = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortForm.parquet', format='parquet')\r\n",
					"display(df.limit(10))\r\n",
					"df.count()"
				],
				"execution_count": 107
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df = df.withColumn(\"Job\",lower(translate(col(\"Job\"),\"./–!-() \",\"\")))\r\n",
					"ctl_tbl = ctl_tbl.withColumn(\"JobDescription\",lower(translate(col(\"JobDescription\"),\"./–!-() \",\"\")))\r\n",
					"display(df.limit(5))\r\n",
					"display(ctl_tbl.limit(5))"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"cfrm_tbl = cfrm_tbl.select(\"Id\",\"Title\")\r\n",
					"ctl_tbl = ctl_tbl.select(\"CohortNameId\",\"JobDescription\",\"AcctMngrId\")\r\n",
					"join_cfctl=ctl_tbl.join(cfrm_tbl,ctl_tbl.CohortNameId == cfrm_tbl.Id,\"left\").drop_duplicates()\r\n",
					"\r\n",
					"join_cfctl=join_cfctl.select(\"AcctMngrId\", \"JobDescription\",\"CohortNameId\",\"Id\",\"Title\")\r\n",
					"join_dfctl=df.join(join_cfctl,df.Job == join_cfctl.JobDescription,\"left\").drop_duplicates()\r\n",
					"\r\n",
					"display(join_dfctl.limit(5))\r\n",
					"display(join_cfctl.limit(5))\r\n",
					"join_dfctl.count()\r\n",
					""
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"join_dfctl= join_dfctl.withColumn(\"Year\", year(to_date(join_dfctl.AppliedOrSourcedDate,\"M/d/y\"))) \\\r\n",
					"       .withColumn(\"Week\", weekofyear(to_date(join_dfctl.AppliedOrSourcedDate, \"M/d/y\"))) \\\r\n",
					".withColumn(\"TrackerType\", when((join_dfctl.Stage == \"Sourced\") | (join_dfctl.Stage == \"Applied\") , \"Reach\")\r\n",
					".when((join_dfctl.Stage == \"Screen\") | (join_dfctl.Stage == \"Assessment\"), \"Test\") \r\n",
					".when((join_dfctl.Stage == \"Interview\"), \"Interview\") \\\r\n",
					".when((join_dfctl.Stage == \"Shortlisted\") | (join_dfctl.Stage == \"Offer\"), \"Offer\") \r\n",
					".when((join_dfctl.Stage == \"Hired\"), \"Conversion\") \r\n",
					".otherwise(\"\"))\r\n",
					"display(join_dfctl.limit(5))\r\n",
					"join_dfctl.count()\r\n",
					""
				],
				"execution_count": 112
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"#abc=join_dfctl.select(\"Id\",\"Title\")\r\n",
					"abc=join_dfctl.where(\"Id<>'0'\")\r\n",
					"display(abc.limit(5))\r\n",
					"#display(TrackTbl.limit(5))\r\n",
					"abc=abc.groupBy(\"TrackerType\").agg(count(\"TrackerType\")).show()\r\n",
					""
				],
				"execution_count": 136
			}
		]
	}
}
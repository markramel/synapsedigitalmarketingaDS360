{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "marksynapseworkspace"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"SharePointOnlineList1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'SharePointOnlineList1'"
		},
		"SharePointOnlineList2_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'SharePointOnlineList2'"
		},
		"marksynapseworkspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'marksynapseworkspace-WorkspaceDefaultSqlServer'"
		},
		"testAzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'testAzureSqlDatabase2'"
		},
		"ApplicationsHttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://upskilltoday.sharepoint.com/sites/GecoTeamAsia/_api/web/GetFileByServerRelativeUrl ('@{linkedService().FileName}')/$value"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://upskilltoday.sharepoint.com/_api/web/GetFileByServerRelativeUrl('/sites/GecoTeamAsia/Sharepoint%20Storage/')/$value"
		},
		"SharePointOnlineList1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "4391736f-1b5d-4ece-855a-19e5968984c8"
		},
		"SharePointOnlineList2_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "4017Q~DnRoDbYpdd7mxtY5Se6xsXr96-Dk_dj"
		},
		"marksynapseworkspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsedlakestgen2mark.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/TalentLyftPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TalentList",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CohortTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SharePointOnlineListSource",
								"httpRequestTimeout": "00:05:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TalentListSharePointOnlineListResource3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TalentList",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CohortForm",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SharePointOnlineListSource",
								"httpRequestTimeout": "00:05:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CohortFormSharePointOnlineListResource2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CohortFormParquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CohortTableList",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CohortForm",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SharePointOnlineListSource",
								"httpRequestTimeout": "00:05:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CohortTableListSharePointOnlineListResource2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CohortTableList",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TalentLyftNotebook1",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "TalentList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "NotebookTalentLyft",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "Capstone",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TalentListSharePointOnlineListResource3')]",
				"[concat(variables('workspaceId'), '/datasets/TalentList')]",
				"[concat(variables('workspaceId'), '/datasets/CohortFormSharePointOnlineListResource2')]",
				"[concat(variables('workspaceId'), '/datasets/CohortFormParquet1')]",
				"[concat(variables('workspaceId'), '/datasets/CohortTableListSharePointOnlineListResource2')]",
				"[concat(variables('workspaceId'), '/datasets/CohortTableList')]",
				"[concat(variables('workspaceId'), '/notebooks/NotebookTalentLyft')]",
				"[concat(variables('workspaceId'), '/bigDataPools/Capstone')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Applications')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "capstone/output",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Id",
						"type": "INT32"
					},
					{
						"name": "ContentTypeID",
						"type": "UTF8"
					},
					{
						"name": "ContentType",
						"type": "UTF8"
					},
					{
						"name": "Title",
						"type": "UTF8"
					},
					{
						"name": "Modified",
						"type": "INT96"
					},
					{
						"name": "Created",
						"type": "INT96"
					},
					{
						"name": "CreatedById",
						"type": "INT32"
					},
					{
						"name": "ModifiedById",
						"type": "INT32"
					},
					{
						"name": "Owshiddenversion",
						"type": "INT32"
					},
					{
						"name": "Version",
						"type": "UTF8"
					},
					{
						"name": "Path",
						"type": "UTF8"
					},
					{
						"name": "ComplianceAssetId",
						"type": "UTF8"
					},
					{
						"name": "StartDate",
						"type": "INT96"
					},
					{
						"name": "EndDate",
						"type": "INT96"
					},
					{
						"name": "TraineeCount",
						"type": "DOUBLE"
					},
					{
						"name": "StatusValue",
						"type": "UTF8"
					},
					{
						"name": "AccntManagerId",
						"type": "INT32"
					},
					{
						"name": "JobList",
						"type": "UTF8"
					},
					{
						"name": "InitialEndDate",
						"type": "INT96"
					},
					{
						"name": "CompanyValue",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ApplicationsParquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "capstone",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Id",
						"type": "INT32"
					},
					{
						"name": "ContentTypeID",
						"type": "UTF8"
					},
					{
						"name": "ContentType",
						"type": "UTF8"
					},
					{
						"name": "Title",
						"type": "UTF8"
					},
					{
						"name": "Modified",
						"type": "INT96"
					},
					{
						"name": "Created",
						"type": "INT96"
					},
					{
						"name": "CreatedById",
						"type": "INT32"
					},
					{
						"name": "ModifiedById",
						"type": "INT32"
					},
					{
						"name": "Owshiddenversion",
						"type": "INT32"
					},
					{
						"name": "Version",
						"type": "UTF8"
					},
					{
						"name": "Path",
						"type": "UTF8"
					},
					{
						"name": "ComplianceAssetId",
						"type": "UTF8"
					},
					{
						"name": "StartDate",
						"type": "INT96"
					},
					{
						"name": "EndDate",
						"type": "INT96"
					},
					{
						"name": "TraineeCount",
						"type": "DOUBLE"
					},
					{
						"name": "StatusValue",
						"type": "UTF8"
					},
					{
						"name": "AccntManagerId",
						"type": "INT32"
					},
					{
						"name": "JobList",
						"type": "UTF8"
					},
					{
						"name": "InitialEndDate",
						"type": "INT96"
					},
					{
						"name": "CompanyValue",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CohortFormParquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "capstone/output",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ApplicationId",
						"type": "UTF8"
					},
					{
						"name": "CandidateId",
						"type": "UTF8"
					},
					{
						"name": "Job",
						"type": "UTF8"
					},
					{
						"name": "JobDepartment",
						"type": "UTF8"
					},
					{
						"name": "JobLocation",
						"type": "UTF8"
					},
					{
						"name": "Stage",
						"type": "UTF8"
					},
					{
						"name": "AppliedOrSourcedDate",
						"type": "UTF8"
					},
					{
						"name": "Disqualified",
						"type": "UTF8"
					},
					{
						"name": "DisqualifiedAt",
						"type": "UTF8"
					},
					{
						"name": "DisqualifiedReason",
						"type": "UTF8"
					},
					{
						"name": "Source",
						"type": "UTF8"
					},
					{
						"name": "SourceSubType",
						"type": "UTF8"
					},
					{
						"name": "ResumeUrl",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "INT32"
					},
					{
						"name": "Week",
						"type": "INT32"
					},
					{
						"name": "TrackerType",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CohortFormSharePointOnlineListResource2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharePointOnlineList1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SharePointOnlineListResource",
				"schema": [],
				"typeProperties": {
					"listName": "CohortForm"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SharePointOnlineList1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CohortTableList')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "capstone/output",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ApplicationId",
						"type": "UTF8"
					},
					{
						"name": "CandidateId",
						"type": "UTF8"
					},
					{
						"name": "Job",
						"type": "UTF8"
					},
					{
						"name": "JobDepartment",
						"type": "UTF8"
					},
					{
						"name": "JobLocation",
						"type": "UTF8"
					},
					{
						"name": "Stage",
						"type": "UTF8"
					},
					{
						"name": "AppliedOrSourcedDate",
						"type": "UTF8"
					},
					{
						"name": "Disqualified",
						"type": "UTF8"
					},
					{
						"name": "DisqualifiedAt",
						"type": "UTF8"
					},
					{
						"name": "DisqualifiedReason",
						"type": "UTF8"
					},
					{
						"name": "Source",
						"type": "UTF8"
					},
					{
						"name": "SourceSubType",
						"type": "UTF8"
					},
					{
						"name": "ResumeUrl",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "INT32"
					},
					{
						"name": "Week",
						"type": "INT32"
					},
					{
						"name": "TrackerType",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CohortTableListSharePointOnlineListResource2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharePointOnlineList1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SharePointOnlineListResource",
				"schema": [],
				"typeProperties": {
					"listName": "CohortTableList"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SharePointOnlineList1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Parent Data Stream.csv",
						"folderPath": "parentdatastream",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DigitalMarketingAds360')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-tid-2886452130161708956-505b6f93-044e-4c7f-827f-9afed77f318c-4-1-c000.snappy.parquet",
						"folderPath": "parentdatastream",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SOURCE",
						"type": "UTF8"
					},
					{
						"name": "xMediaGroup",
						"type": "UTF8"
					},
					{
						"name": "MEDIATYPE",
						"type": "UTF8"
					},
					{
						"name": "xMediaChannel",
						"type": "UTF8"
					},
					{
						"name": "AgencyChannelName",
						"type": "UTF8"
					},
					{
						"name": "CampaignName",
						"type": "UTF8"
					},
					{
						"name": "Account",
						"type": "UTF8"
					},
					{
						"name": "LOB",
						"type": "UTF8"
					},
					{
						"name": "BU",
						"type": "UTF8"
					},
					{
						"name": "PARENTCAMPAIGNNAME",
						"type": "UTF8"
					},
					{
						"name": "SUBCAMPAIGNNAME",
						"type": "UTF8"
					},
					{
						"name": "COUNTRYCODE",
						"type": "UTF8"
					},
					{
						"name": "COUNTRYNAME",
						"type": "UTF8"
					},
					{
						"name": "REGION",
						"type": "UTF8"
					},
					{
						"name": "xCampaignQuarter",
						"type": "UTF8"
					},
					{
						"name": "SearchKeywordType",
						"type": "UTF8"
					},
					{
						"name": "SearchMatchType",
						"type": "UTF8"
					},
					{
						"name": "EmeaRegion",
						"type": "UTF8"
					},
					{
						"name": "EmeaSubRegion",
						"type": "UTF8"
					},
					{
						"name": "xAccountCurrency",
						"type": "UTF8"
					},
					{
						"name": "Compliant",
						"type": "UTF8"
					},
					{
						"name": "AgencyOwnerMarket",
						"type": "UTF8"
					},
					{
						"name": "CampaignScale",
						"type": "UTF8"
					},
					{
						"name": "CampaignObjective",
						"type": "UTF8"
					},
					{
						"name": "MediaBriefName",
						"type": "UTF8"
					},
					{
						"name": "Impression",
						"type": "UTF8"
					},
					{
						"name": "Click",
						"type": "UTF8"
					},
					{
						"name": "View",
						"type": "UTF8"
					},
					{
						"name": "Swiperate",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "Quarter",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DigitalMarketingETL')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parentdatastream",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SOURCE",
						"type": "UTF8"
					},
					{
						"name": "xMediaGroup",
						"type": "UTF8"
					},
					{
						"name": "MEDIATYPE",
						"type": "UTF8"
					},
					{
						"name": "xMediaChannel",
						"type": "UTF8"
					},
					{
						"name": "AgencyChannel_Name",
						"type": "UTF8"
					},
					{
						"name": "CampaignName",
						"type": "UTF8"
					},
					{
						"name": "Account",
						"type": "UTF8"
					},
					{
						"name": "LOB",
						"type": "UTF8"
					},
					{
						"name": "BU",
						"type": "UTF8"
					},
					{
						"name": "PARENTCAMPAIGN_NAME",
						"type": "UTF8"
					},
					{
						"name": "SUBCAMPAIGNNAME",
						"type": "UTF8"
					},
					{
						"name": "COUNTRYCODE",
						"type": "UTF8"
					},
					{
						"name": "COUNTRYNAME",
						"type": "UTF8"
					},
					{
						"name": "REGION",
						"type": "UTF8"
					},
					{
						"name": "xCampaignQuarter",
						"type": "UTF8"
					},
					{
						"name": "SearchKeywordType",
						"type": "UTF8"
					},
					{
						"name": "SearchMatchType",
						"type": "UTF8"
					},
					{
						"name": "EmeaRegion",
						"type": "UTF8"
					},
					{
						"name": "EmeaSubRegion",
						"type": "UTF8"
					},
					{
						"name": "xAccountCurrency",
						"type": "UTF8"
					},
					{
						"name": "Compliant",
						"type": "UTF8"
					},
					{
						"name": "AgencyOwnerMarket",
						"type": "UTF8"
					},
					{
						"name": "CampaignScale",
						"type": "UTF8"
					},
					{
						"name": "CampaignObjective",
						"type": "UTF8"
					},
					{
						"name": "MediaBriefName",
						"type": "UTF8"
					},
					{
						"name": "Impression",
						"type": "UTF8"
					},
					{
						"name": "Click",
						"type": "UTF8"
					},
					{
						"name": "View",
						"type": "UTF8"
					},
					{
						"name": "Swipe_rate",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointOnlineListResource1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharePointOnlineList1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SharePointOnlineListResource",
				"schema": [],
				"typeProperties": {
					"listName": "CohortForm"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SharePointOnlineList1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TalentList')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "capstone/output",
						"fileSystem": "dlsg2markfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ApplicationId",
						"type": "UTF8"
					},
					{
						"name": "CandidateId",
						"type": "UTF8"
					},
					{
						"name": "Job",
						"type": "UTF8"
					},
					{
						"name": "JobDepartment",
						"type": "UTF8"
					},
					{
						"name": "JobLocation",
						"type": "UTF8"
					},
					{
						"name": "Stage",
						"type": "UTF8"
					},
					{
						"name": "AppliedOrSourcedDate",
						"type": "UTF8"
					},
					{
						"name": "Disqualified",
						"type": "UTF8"
					},
					{
						"name": "DisqualifiedAt",
						"type": "UTF8"
					},
					{
						"name": "DisqualifiedReason",
						"type": "UTF8"
					},
					{
						"name": "Source",
						"type": "UTF8"
					},
					{
						"name": "SourceSubType",
						"type": "UTF8"
					},
					{
						"name": "ResumeUrl",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "INT32"
					},
					{
						"name": "Week",
						"type": "INT32"
					},
					{
						"name": "TrackerType",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TalentListSharePointOnlineListResource3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharePointOnlineList1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SharePointOnlineListResource",
				"schema": [],
				"typeProperties": {
					"listName": "TalentList"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SharePointOnlineList1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_CSV_Applicaiton')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Application.csv",
						"folderPath": "capstone/GecoAPI",
						"fileSystem": "dlsg2markfilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "candidateId",
						"type": "String"
					},
					{
						"name": "profileUrl",
						"type": "String"
					},
					{
						"name": "created",
						"type": "String"
					},
					{
						"name": "disqualified",
						"type": "String"
					},
					{
						"name": "disqualifiedAt",
						"type": "String"
					},
					{
						"name": "disqualificationReason",
						"type": "String"
					},
					{
						"name": "stageId",
						"type": "String"
					},
					{
						"name": "jobId",
						"type": "String"
					},
					{
						"name": "sourceType",
						"type": "String"
					},
					{
						"name": "sourceBy",
						"type": "String"
					},
					{
						"name": "sourceFrom",
						"type": "String"
					},
					{
						"name": "sourceChanel",
						"type": "String"
					},
					{
						"name": "sourceFormatted",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_CSV_Candidate')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Candidate.csv",
						"folderPath": "capstone/GecoAPI",
						"fileSystem": "dlsg2markfilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "firstName",
						"type": "String"
					},
					{
						"name": "lastName",
						"type": "String"
					},
					{
						"name": "possibleDuplicates",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "company",
						"type": "String"
					},
					{
						"name": "created",
						"type": "String"
					},
					{
						"name": "lastModified",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "applications",
						"type": "String"
					},
					{
						"name": "emails",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_CSV_Department')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Department.csv",
						"folderPath": "capstone/GecoAPI",
						"fileSystem": "dlsg2markfilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "externalId",
						"type": "String"
					},
					{
						"name": "parentId",
						"type": "String"
					},
					{
						"name": "isTranslated",
						"type": "String"
					},
					{
						"name": "translation",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_CSV_Job')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Job.csv",
						"folderPath": "capstone/GecoAPI",
						"fileSystem": "dlsg2markfilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "applicationId",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "absoluteUrl",
						"type": "String"
					},
					{
						"name": "relativeUrl",
						"type": "String"
					},
					{
						"name": "shortlinkUrl",
						"type": "String"
					},
					{
						"name": "friendlyUrl",
						"type": "String"
					},
					{
						"name": "lastModified",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_CSV_JobList')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "JobList.csv",
						"folderPath": "capstone/GecoAPI",
						"fileSystem": "dlsg2markfilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "departmentId",
						"type": "String"
					},
					{
						"name": "locationCountry",
						"type": "String"
					},
					{
						"name": "locationCountryCode",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "zipCode",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "absoluteUrl",
						"type": "String"
					},
					{
						"name": "relativeUrl",
						"type": "String"
					},
					{
						"name": "shortlinkUrl",
						"type": "String"
					},
					{
						"name": "friendlyUrl",
						"type": "String"
					},
					{
						"name": "lastModified",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_CSV_Stage')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marksynapseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Stage.csv",
						"folderPath": "capstone/GecoAPI",
						"fileSystem": "dlsg2markfilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "position",
						"type": "String"
					},
					{
						"name": "applicationId",
						"type": "String"
					},
					{
						"name": "candidateId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/marksynapseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ApplicationsHttpServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "@dataset().RelativeURL"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ApplicationsHttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "8db08195-1beb-47ae-a5d7-4467e96beb48",
					"tenantID": "07cc872f-b6e3-487f-834e-25eb4f34ddad"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointOnlineList1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SharePointOnlineList",
				"typeProperties": {
					"siteUrl": "https://upskilltoday.sharepoint.com/sites/GecoTeamAsia/",
					"tenantId": "07cc872f-b6e3-487f-834e-25eb4f34ddad",
					"servicePrincipalId": "[parameters('SharePointOnlineList1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('SharePointOnlineList1_servicePrincipalKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointOnlineList2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SharePointOnlineList",
				"typeProperties": {
					"siteUrl": "https://upskilltoday.sharepoint.com/sites/GecoTeamAsia/",
					"tenantId": "07cc872f-b6e3-487f-834e-25eb4f34ddad",
					"servicePrincipalId": "[parameters('SharePointOnlineList2_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('SharePointOnlineList2_servicePrincipalKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/marksynapseworkspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('marksynapseworkspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/marksynapseworkspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('marksynapseworkspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/testAzureSqlDatabase2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('testAzureSqlDatabase2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharepointOnlineListTrigger 1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "TalentLyftPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-03-19T14:34:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							],
							"weekDays": [
								"Sunday",
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/TalentLyftPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 10')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [Id]\n,[ContentTypeID]\n,[ContentType]\n,[Title]\n,[Modified]\n,[Created]\n,[CreatedById]\n,[ModifiedById]\n,[Owshiddenversion]\n,[Version]\n,[Path]\n,[ComplianceAssetId]\n,[StartDate]\n,[EndDate]\n,[TraineeCount]\n,[StatusValue]\n,[AccntManagerId]\n,[JobList]\n,[InitialEndDate]\n,[CompanyValue]\n FROM [capstone].[dbo].[cohortform]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "capstone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE tblparentdatastream (\n\t[SOURCE] nvarchar(4000),\n\t[xMediaGroup] nvarchar(4000),\n\t[MEDIATYPE] nvarchar(4000),\n\t[xMediaChannel] nvarchar(4000),\n\t[AgencyChannelName] nvarchar(4000),\n\t[CampaignName] nvarchar(4000),\n\t[Account] nvarchar(4000),\n\t[LOB] nvarchar(4000),\n\t[BU] nvarchar(4000),\n\t[PARENTCAMPAIGNNAME] nvarchar(4000),\n\t[SUBCAMPAIGNNAME] nvarchar(4000),\n\t[COUNTRYCODE] nvarchar(4000),\n\t[COUNTRYNAME] nvarchar(4000),\n\t[REGION] nvarchar(4000),\n\t[xCampaignQuarter] nvarchar(4000),\n\t[SearchKeywordType] nvarchar(4000),\n\t[SearchMatchType] nvarchar(4000),\n\t[EmeaRegion] nvarchar(4000),\n\t[EmeaSubRegion] nvarchar(4000),\n\t[xAccountCurrency] nvarchar(4000),\n\t[Compliant] nvarchar(4000),\n\t[AgencyOwnerMarket] nvarchar(4000),\n\t[CampaignScale] nvarchar(4000),\n\t[CampaignObjective] nvarchar(4000),\n\t[MediaBriefName] nvarchar(4000),\n\t[Impression] nvarchar(4000),\n\t[Click] nvarchar(4000),\n\t[View] nvarchar(4000),\n\t[Swiperate] nvarchar(4000),\n\t[Year] nvarchar(4000),\n\t[Quarter] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'parentdatastream/part-00000-tid-2886452130161708956-505b6f93-044e-4c7f-827f-9afed77f318c-4-1-c000.snappy.parquet',\n\tDATA_SOURCE = [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.tblparentdatastream\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DigitalMarketing",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE tbldigitalmarketing (\n\t[SOURCE] nvarchar(4000),\n\t[xMediaGroup] nvarchar(4000),\n\t[MEDIATYPE] nvarchar(4000),\n\t[xMediaChannel] nvarchar(4000),\n\t[AgencyChannelName] nvarchar(4000),\n\t[CampaignName] nvarchar(4000),\n\t[Account] nvarchar(4000),\n\t[LOB] nvarchar(4000),\n\t[BU] nvarchar(4000),\n\t[PARENTCAMPAIGNNAME] nvarchar(4000),\n\t[SUBCAMPAIGNNAME] nvarchar(4000),\n\t[COUNTRYCODE] nvarchar(4000),\n\t[COUNTRYNAME] nvarchar(4000),\n\t[REGION] nvarchar(4000),\n\t[xCampaignQuarter] nvarchar(4000),\n\t[SearchKeywordType] nvarchar(4000),\n\t[SearchMatchType] nvarchar(4000),\n\t[EmeaRegion] nvarchar(4000),\n\t[EmeaSubRegion] nvarchar(4000),\n\t[xAccountCurrency] nvarchar(4000),\n\t[Compliant] nvarchar(4000),\n\t[AgencyOwnerMarket] nvarchar(4000),\n\t[CampaignScale] nvarchar(4000),\n\t[CampaignObjective] nvarchar(4000),\n\t[MediaBriefName] nvarchar(4000),\n\t[Impression] nvarchar(4000),\n\t[Click] nvarchar(4000),\n\t[View] nvarchar(4000),\n\t[Swiperate] nvarchar(4000),\n\t[Year] nvarchar(4000),\n\t[Quarter] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'parentdatastream/part-00000-tid-2886452130161708956-505b6f93-044e-4c7f-827f-9afed77f318c-4-1-c000.snappy.parquet',\n\tDATA_SOURCE = [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.tbldigitalmarketing\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DigitalMarketing",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE VIEW dbo.digitalmarketing\n\tAS SELECT * FROM dbo.tbldigitalmarketing\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DigitalMarketing",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nDROP EXTERNAL TABLE dbo.csvparentdatastream",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DigitalMarketing",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 8')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE tapplications (\n\t[ApplicationId] nvarchar(4000),\n\t[CandidateId] nvarchar(4000),\n\t[Job] nvarchar(4000),\n\t[JobDepartment] nvarchar(4000),\n\t[JobLocation] nvarchar(4000),\n\t[Stage] nvarchar(4000),\n\t[AppliedOrSourcedDate] nvarchar(4000),\n\t[Disqualified] nvarchar(4000),\n\t[DisqualifiedAt] nvarchar(4000),\n\t[DisqualifiedReason] nvarchar(4000),\n\t[Source] nvarchar(4000),\n\t[SourceSubType] nvarchar(4000),\n\t[ResumeUrl] nvarchar(4000),\n\t[Year] int,\n\t[Week] int,\n\t[TrackerType] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'capstone/output/tblapplications/part-00000-6e05a74f-13d0-4f3e-a9ff-30ceccd4bb1e-c000.snappy.parquet',\n\tDATA_SOURCE = [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.tapplications\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "talentlyft",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT COUNT ([ApplicationId])\n\n FROM [capstone].[dbo].[applications]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create sql serverlesstblapplications from applications parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE tblapplications (\n\t[Job] nvarchar(4000),\n\t[ApplicationId] nvarchar(4000),\n\t[CandidateId] nvarchar(4000),\n\t[JobDepartment] nvarchar(4000),\n\t[JobLocation] nvarchar(4000),\n\t[Stage] nvarchar(4000),\n\t[AppliedOrSourcedDate] nvarchar(4000),\n\t[Disqualified] nvarchar(4000),\n\t[DisqualifiedAt] nvarchar(4000),\n\t[DisqualifiedReason] nvarchar(4000),\n\t[Source] nvarchar(4000),\n\t[SourceSubType] nvarchar(4000),\n\t[ResumeUrl] nvarchar(4000),\n\t[Year] int,\n\t[Week] int,\n\t[CohortName] nvarchar(4000),\n\t[TrackerType] nvarchar(4000),\n\t[Reach] nvarchar(4000),\n\t[Test] nvarchar(4000),\n\t[Interview] nvarchar(4000),\n\t[Offer] nvarchar(4000),\n\t[Conversion] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'capstone/output/tblapplications/part-00000-b6e425df-1e36-487f-af95-9c38db953d3c-c000.snappy.parquet',\n\tDATA_SOURCE = [dlsg2markfilesystem_synapsedlakestgen2mark_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.tblapplications\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "talentlyft",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create view applications at talentlyft')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "create view applications in talentlyft database",
				"content": {
					"query": "Drop VIEW dbo.testapplications\n\nCREATE VIEW dbo.applications\n\tAS SELECT * FROM dbo.tapplications",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "talentlyft",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GecoProject_Universal')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Capstone",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c59c48fd-9092-4fbf-8b20-d54c60b5f871"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
						"name": "Capstone",
						"type": "Spark",
						"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"#Load to Dataframe\r\n",
							"df_app = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Application.csv', format='csv', header=True)\r\n",
							"df_candidate = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Candidate.csv', format='csv', header=True)\r\n",
							"df_department = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Department.csv', format='csv', header=True)\r\n",
							"df_job = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Job.csv', format='csv', header=True)\r\n",
							"df_joblist = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/JobList.csv', format='csv', header=True)\r\n",
							"df_stage = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/GecoAPI/Stage.csv', format='csv', header=True)\r\n",
							"\r\n",
							"#Change 'undefined' to empty space\r\n",
							"df_app = df_app.fillna(value = \"\")\r\n",
							"df_candidate = df_candidate.fillna(value = \"\")\r\n",
							"df_department = df_department.fillna(value = \"\")\r\n",
							"df_job = df_job.fillna(value = \"\")\r\n",
							"df_joblist = df_joblist.fillna(value = \"\")\r\n",
							"df_stage = df_stage.fillna(value = \"\")\r\n",
							"\r\n",
							"#display(df_app.limit(5))\r\n",
							"#display(df_candidate.limit(5))\r\n",
							"#display(df_department.limit(5))\r\n",
							"#display(df_job.limit(5))\r\n",
							"#display(df_joblist.limit(5))\r\n",
							"#display(df_stage.limit(5))"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as f\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"#Applications + Stage\r\n",
							"\r\n",
							"df_appStage = df_app.join(df_stage, [df_stage['Id'] == df_app ['stageId'], df_stage['applicationId'] == df_app ['id']], 'left') \\\r\n",
							"    .select(df_app['Id'], df_app['candidateId'], 'profileUrl', col('created').alias('appCreated'), col('disqualified').alias('appDisqualified')\r\n",
							"        , col('disqualifiedAt').alias('appDisqualifiedAt'), col('disqualificationReason').alias('appDisqualificationReason')\r\n",
							"        , col('name').alias('stage'), 'type', 'jobId', 'sourceType', 'sourceBy', 'sourceFrom', 'sourceChanel', 'sourceFormatted')\r\n",
							"\r\n",
							"#display(df_appStage.limit(5))\r\n",
							"#display(df_joblist.limit(5))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as f\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"#AppStage + Job\r\n",
							"\r\n",
							"df_appstJob = df_appStage.join(df_joblist, [df_joblist['Id'] == df_appStage['jobId']], 'left') \\\r\n",
							"    .select(df_appStage['Id'], df_appStage['candidateId'], 'profileUrl', 'appCreated', 'appDisqualified', 'appDisqualifiedAt', 'appDisqualificationReason', 'stage', 'type'\r\n",
							"        , col('title').alias('job'), df_joblist['departmentId'], df_joblist['locationCountry'], df_joblist['locationCountryCode'], df_joblist['region'], df_joblist['city'], df_joblist['zipCode'], df_joblist['status']\r\n",
							"        , 'sourceType', 'sourceBy', 'sourceFrom', 'sourceChanel', 'sourceFormatted')\r\n",
							"\r\n",
							"#display(df_appstJob.limit(5))"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql import functions as f\r\n",
							"\r\n",
							"#Create tagging for each Stage\r\n",
							"df_appstJob = df_appstJob.withColumn(\"conversion\", \r\n",
							"    f.when((f.col(\"Stage\") == \"Sourced\") | (f.col(\"Stage\") == \"Applied\"), \"Reach\")\r\n",
							"    .when((f.col(\"Stage\") == \"Screen\") | (f.col(\"Stage\") == \"OfferToClient\"), \"Test\")\r\n",
							"    .when((f.col(\"Stage\") == \"Interview\"), \"Interview\")\r\n",
							"    .when((f.col(\"Stage\") == \"Shortlisted\") | (f.col(\"Stage\") == \"Offer\"), \"Offer\")\r\n",
							"    .when((f.col(\"Stage\") == \"Hired\"), \"Conversion\")\r\n",
							"    .otherwise(\"NA\"))\r\n",
							"\r\n",
							"#Tag as 1 if Conversion to get which stage are converted\r\n",
							"df_appstJob = df_appstJob.withColumn(\"isReach\", f.when((f.col(\"conversion\") == \"Reach\"), 1).otherwise(0))\r\n",
							"df_appstJob = df_appstJob.withColumn(\"isTest\", f.when((f.col(\"conversion\") == \"Test\"), 1).otherwise(0))\r\n",
							"df_appstJob = df_appstJob.withColumn(\"isInterview\", f.when((f.col(\"conversion\") == \"Interview\"), 1).otherwise(0))\r\n",
							"df_appstJob = df_appstJob.withColumn(\"isOffer\", f.when((f.col(\"conversion\") == \"Offer\"), 1).otherwise(0))\r\n",
							"df_appstJob = df_appstJob.withColumn(\"isConversion\", f.when((f.col(\"conversion\") == \"Conversion\"), 1).otherwise(0))\r\n",
							"\r\n",
							"#Create new column with removed special characters\r\n",
							"df_appstJob = df_appstJob.withColumn(\"JobDescNoChar\", f.lower(f.translate(f.col(\"Job\"),\"./–!-() \",\"\")))\r\n",
							"\r\n",
							"#display(df_appstJob.limit(5))\r\n",
							"#display(df_department.limit(5))"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as f\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"#AppStageJob + Department\r\n",
							"\r\n",
							"df_appstjobDept = df_appstJob.join(df_department, [df_department['Id'] == df_appstJob['departmentId']], 'left') \\\r\n",
							"    .select(df_appStage['Id'], df_appStage['candidateId'], 'profileUrl', 'appCreated', 'appDisqualified', 'appDisqualifiedAt', 'appDisqualificationReason'\r\n",
							"        , 'stage', 'conversion', 'isReach', 'isTest', 'isInterview', 'isOffer', 'isConversion', 'type'\r\n",
							"        , 'job', col('name').alias('department')\r\n",
							"        , 'locationCountry', 'locationCountryCode', 'region', 'city', 'zipCode', 'status'\r\n",
							"        , 'sourceType', 'sourceBy', 'sourceFrom', 'sourceChanel', 'sourceFormatted')\r\n",
							"\r\n",
							"#display(df_appstjobDept.limit(5))\r\n",
							"#display(df_candidate.limit(5))"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as f\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"#AppStageJobDepartment + Candidate\r\n",
							"\r\n",
							"df_appCandidate = df_appstjobDept.join(df_candidate, [df_candidate['Id'] == df_appstjobDept['candidateId']], 'left') \\\r\n",
							"    .select(df_appStage['Id'], df_appStage['candidateId']\r\n",
							"        , df_candidate['firstName'], df_candidate['lastName'], col('created').alias('candidateCreated'), col('lastModified').alias('candidateLastModified')\r\n",
							"        , 'profileUrl', 'appCreated', 'appDisqualified', 'appDisqualifiedAt', 'appDisqualificationReason'\r\n",
							"        , 'stage', 'conversion', 'isReach', 'isTest', 'isInterview', 'isOffer', 'isConversion', 'type'\r\n",
							"        , 'job', 'department'\r\n",
							"        , 'locationCountry', 'locationCountryCode', 'region', 'city', 'zipCode', 'status'\r\n",
							"        , 'sourceType', 'sourceBy', 'sourceFrom', 'sourceChanel', 'sourceFormatted')\r\n",
							"\r\n",
							"\r\n",
							"#Create FullName column\r\n",
							"df_appCandidate = df_appCandidate.withColumn('fullName', f.concat(f.col('firstName'),f.lit(' '),f.col('lastName')))\r\n",
							"\r\n",
							"#Remove undefined\r\n",
							"df_appCandidate = df_appCandidate.fillna(value = \"\")\r\n",
							"\r\n",
							"#display(df_appCandidate.limit(5))"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_appCandidate = df_appCandidate.repartition(1)\r\n",
							"df_appCandidate.write.mode('overwrite').option(\"header\", True).csv(\"/capstone/GecoAPI/Output\")\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##%%sql\r\n",
							"##DROP TABLE capstone.applications"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##Drop  table in the default database\r\n",
							"##%%sql\r\n",
							"##DROP TABLE applications"
						],
						"outputs": [],
						"execution_count": 50
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Capstone",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "70ff8631-faf6-4728-9d61-4a13ba4a06ef"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
						"name": "Capstone",
						"type": "Spark",
						"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/NYCTripSmall.parquet', format='parquet')\r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE DATABASE nyctaxi"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.saveAsTable(\"nyctaxi.trip\")"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"SELECT * FROM nyctaxi.trip\")\r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"Select MedallionID, HackneyLicenseID, Count(*) as Trips from nyctaxi.trip Where DateID Between '20131217' AND '201312231' Group By MedallionID, HackneyLicenseID Having Count (*) > 100\")\r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"\"\"\r\n",
							"Select MedallionID, \r\n",
							"Count(MedallionID) as CabTrip \r\n",
							"From nyctaxi.trip \r\n",
							"Where DateID Between '20131217' AND '20131231'\r\n",
							"Group By MedallionID \r\n",
							"Order by CabTrip Desc \r\n",
							"\"\"\")\r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.saveAsTable(\"nyctaxi.cabtripstats\")"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"\"\"\r\n",
							"    Select HackneyLicenseID,\r\n",
							"    Count(HackneyLicenseID) as DriverTrip\r\n",
							"From nyctaxi.trip\r\n",
							"Where DateID Between '20131217' AND '20131231'\r\n",
							"Group by HackneyLicenseID\r\n",
							"Order by DriverTrip Desc\r\n",
							"\"\"\")\r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.saveAsTable(\"nyctaxi.drivertripstats\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.repartition(1)\r\n",
							"df.write.mode(\"overwrite\").parquet(\"/nyctaxi_single/CabTripStats_ParquetFormat\")"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.repartition(1)\r\n",
							"df.write.mode(\"overwrite\").parquet(\"/nyctaxi_single/DriverTripStats_ParquetFormat\")"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.repartition(1)\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"applications\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Capstone",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "44c2e113-caee-46d4-9167-be8fc348caca"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
						"name": "Capstone",
						"type": "Spark",
						"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/applications.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True\r\n",
							")\r\n",
							"##display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"dg = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortTableList.parquet', format='parquet')\r\n",
							"dg = dg.drop('Title')\r\n",
							"## If header exists uncomment line below\r\n",
							"##, header=True\r\n",
							"##)\r\n",
							"##display(dg.limit(5))"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"dh = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortForm.parquet', format='parquet')\r\n",
							"## If header exists uncomment line below\r\n",
							"##, header=True\r\n",
							"##)\r\n",
							"##display(dg.limit(10))"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"## If header exists uncomment line below\r\n",
							"##, header=True\r\n",
							"##)\r\n",
							"##display(dj.limit(5))"
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"df = df.withColumn(\"Job\",lower(translate(col(\"Job\"),\"./–!-() \",\"\")))\r\n",
							"\r\n",
							"##display(df.limit(5))\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"dg = dg.withColumn(\"Job\",lower(translate(col(\"JobDescription\"),\"./–!-() \",\"\")) )\r\n",
							"\r\n",
							"\r\n",
							"##display(dg.limit(5))\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"df = df.withColumn(\"Year\", year(to_date(df.AppliedOrSourcedDate,\"M/d/y\"))) \\\r\n",
							".withColumn(\"Week\", weekofyear(to_utc_timestamp(to_date(df.AppliedOrSourcedDate, \"M/d/y\"),'+08:00')))\r\n",
							"\r\n",
							"display(df.limit(5))\r\n",
							"display(df.filter(df.AppliedOrSourcedDate == \"01/01/2022\").limit(5))"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df= df.withColumn(\"Week\", weekofyear(to_utc_timestamp(to_date(\"01-01-2022\", \"M/d/y\"),\"PST\")))\r\n",
							"display(df.limit(1))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#select two columns in TalentList\r\n",
							"dj = dj.select(\"Id\", \"Title\")\r\n",
							"dj = dj.withColumnRenamed(\"Title\", \"AcctMngr\")\r\n",
							"#join tables CohortTableList and TalentList\r\n",
							"dq = dg.join(dj, dg.AcctMngrId==dj.Id,\"left\").drop(dj.Id)\r\n",
							"display(dq)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#select two columns in TalentList\r\n",
							"dj = dj.select(\"Id\", \"Title\")\r\n",
							"dj = dj.withColumnRenamed(\"Title\", \"AcctMngr\")\r\n",
							"#join tables CohortTableList and TalentList\r\n",
							"dq = dg.join(dj, dg.AcctMngrId==dj.Id,\"left\").drop(dj.Id)\r\n",
							"#select two columns in CohortForm\r\n",
							"dh = dh.select(\"Id\", \"Title\")\r\n",
							"dh = dh.withColumnRenamed(\"Title\",\"CohortName\")\r\n",
							"#join tables CohortTableList and CohortForm\r\n",
							"da = dq.join(dh, dq.CohortNameId==dh.Id,\"left\")\r\n",
							"da = da.distinct()\r\n",
							"#join tables Applications and CohortTableList\r\n",
							"ds = df.join(da,df.Job==da.Job,\"left\")\r\n",
							"##ds = ds.withColumnRenamed(\"Title\",\"CohortName\")\r\n",
							"display(ds.limit(5))"
						],
						"outputs": [],
						"execution_count": 66
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"dj = dj.select(\"Title\")\r\n",
							"dj = dj.withColumnRenamed(\"Title\",\"TA\")\r\n",
							"ds = ds.join(dj,ds.SourceSubType==dj.TA,\"left\")\r\n",
							"\r\n",
							"ds = ds.withColumn(\"FinalTA\", when(ds.SourceSubType == ds.TA,ds.SourceSubType).otherwise(ds.AcctMngr))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 67
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"dj = dj.select(\"Title\",\"PictureURL\")\r\n",
							"dj = dj.withColumnRenamed(\"Title\",\"TA\")\r\n",
							"ds = ds.join(dj,ds.FinalTA==dj.TA,\"left\").drop(ds.TA)\r\n",
							"ds = ds.withColumnRenamed(\"PictureURL\",\"FinalTAPicUrl\")\r\n",
							"ds = ds.drop(\"ContentTypeID\", \"ContentType\",\"Modified\",\"Created\", \"CreatedById\", \"ModifiedById\", \\\r\n",
							"\"Owshiddenversion\", \"Version\", \"Path\", \"ComplianceAssetId\")\r\n",
							"#ds = ds.withColumn(\"FinalTAPicUrl\", when(ds.SourceSubType == ds.TA,ds.SourceSubType).otherwise(ds.AcctMngr))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 68
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(ds.limit(5))"
						],
						"outputs": [],
						"execution_count": 69
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ds = df.join(dg,df.Job==dg.Job,\"inner\")\r\n",
							"display(ds.limit(5))"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##outer join applications table and Cohort Form for Job column\r\n",
							"ds=df.join(dg,on=\"Job\",how=\"outer\")\r\n",
							"display(ds.limit(5))"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##%%pyspark\r\n",
							"##import pyspark.sql.functions as talent\r\n",
							"\r\n",
							"##ds = ds.withColumn(\"TrackerType\",  \r\n",
							"##talent.when((talent.col(\"Stage\") == \"Sourced\") | (talent.col(\"Stage\") == \"Applied\" ) , \"Reach\")\r\n",
							"##.when((talent.col(\"Stage\") == \"Screen\") | (talent.col(\"Stage\") == \"Assessment\"  ), \"Test\") \r\n",
							"##.when((talent.col(\"Stage\") == \"Interview\"  ), \"Interview\") \r\n",
							"##.when((talent.col(\"Stage\") == \"Shortlisted\") | (talent.col(\"Stage\") == \"Offer\"  ), \"Offer\") \r\n",
							"##.when((talent.col(\"Stage\") == \"Hired\"), \"Conversion\") \r\n",
							"##.otherwise(\"\"))\r\n",
							"\r\n",
							"##display(ds.limit(5))\r\n",
							"\r\n",
							"##df.write.save(\"capstone.applications\")\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"ds = ds.withColumn(\"TrackerType\", when((ds.Stage == \"Sourced\") | (ds.Stage == \"Applied\") , \"Reach\")\r\n",
							".when((ds.Stage == \"Screen\") | (ds.Stage == \"Assessment\"), \"Test\") \r\n",
							".when((ds.Stage == \"Interview\"), \"Interview\") \r\n",
							".when((ds.Stage == \"Shortlisted\") | (ds.Stage == \"Offer\"), \"Offer\") \r\n",
							".when((ds.Stage == \"Hired\"), \"Conversion\") \r\n",
							".otherwise(\"\"))\r\n",
							"\r\n",
							"display(ds.limit(5))\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 70
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"ds = ds.withColumn(\"Reach\", when((ds.TrackerType == \"Reach\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Test\", when((ds.TrackerType == \"Test\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Interview\", when((ds.TrackerType == \"Interview\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Offer\", when((ds.TrackerType == \"Offer\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Conversion\", when((ds.TrackerType == \"Conversion\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							"\r\n",
							"display(ds.limit(5))"
						],
						"outputs": [],
						"execution_count": 71
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"ds = ds.withColumn(\"Reach\", when((ds.TrackerType == \"Reach\") & (ds.Disqualified == \"No\") , \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Test\", when((ds.TrackerType == \"Test\") & (ds.Disqualified == \"No\") , \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Interview\", when((ds.TrackerType == \"Interview\") & (ds.Disqualified == \"No\") , \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Offer\", when((ds.TrackerType == \"Offer\") & (ds.Disqualified == \"No\") , \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Conversion\", when((ds.TrackerType == \"Conversion\") & (ds.Disqualified == \"No\") , \"1\").otherwise(\"0\")) \\\r\n",
							"\r\n",
							"display(ds.limit(5))"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"ds = ds.withColumn(\"Conversion\",ds.Conversion.cast(FloatType()))\r\n",
							"ds.groupBy(\"Conversion\").sum(\"Conversion\").show(truncate=False)"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"display(ds.limit(5))"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%sql\r\n",
							"DROP TABLE capstone.applications"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ds = ds.drop(\"id\",\"job\" )\r\n",
							"ds = ds.distinct()\r\n",
							"\r\n",
							"ds = ds.repartition(1)\r\n",
							"ds.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.applications\")"
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dg = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortTableList.parquet', format='parquet')\r\n",
							"dg.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.CohortTableList\")"
						],
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dh = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortForm.parquet', format='parquet')\r\n",
							"dh.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.CohortForm\")"
						],
						"outputs": [],
						"execution_count": 74
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"dj.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.TalentList\")"
						],
						"outputs": [],
						"execution_count": 75
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##ds = ds.repartition(1)\r\n",
							"##ds.write.mode(\"overwrite\").parquet(\"/capstone/output/tblapplications\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##%%sql\r\n",
							"##DROP TABLE capstone.applications"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##Drop  table in the default database\r\n",
							"##%%sql\r\n",
							"##DROP TABLE applications"
						],
						"outputs": [],
						"execution_count": 32
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2_Copy1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Capstone",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4243e85f-97be-4f07-b274-99135c389ab5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
						"name": "Capstone",
						"type": "Spark",
						"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/applications.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True\r\n",
							")\r\n",
							"##display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"df = df.withColumn(\"Job\",translate(col(\"Job\"),\"./–!-() \",\"\")) \r\n",
							"##display(df.limit(5))\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"df = df.withColumn(\"Year\", year(to_date(df.AppliedOrSourcedDate,\"M/d/y\"))) \\\r\n",
							".withColumn(\"Week\", weekofyear(to_date(df.AppliedOrSourcedDate, \"M/d/y\")))\r\n",
							"\r\n",
							"display(df.limit(5))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"df = df.withColumn(\"TrackerType\", when((df.Stage == \"Sourced\") | (df.Stage == \"Applied\") , \"Reach\")\r\n",
							".when((df.Stage == \"Screen\") | (df.Stage == \"Assessment\"), \"Test\") \r\n",
							".when((df.Stage == \"Interview\"), \"Interview\") \r\n",
							".when((df.Stage == \"Shortlisted\") | (df.Stage == \"Offer\"), \"Offer\") \r\n",
							".when((df.Stage == \"Hired\"), \"Conversion\") \r\n",
							".otherwise(\"\"))\r\n",
							"\r\n",
							"display(df.limit(5))\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.repartition(1)\r\n",
							"df.write.mode(\"overwrite\").parquet(\"/capstone/output/tblapplications\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##ds = ds.repartition(1)\r\n",
							"df.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.applications\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##%%sql\r\n",
							"##DROP TABLE capstone.applications"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##Drop  table in the default database\r\n",
							"##%%sql\r\n",
							"##DROP TABLE applications"
						],
						"outputs": [],
						"execution_count": 17
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 3')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Capstone",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a68b5ffc-9049-482b-baab-daf1a160f122"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
						"name": "Capstone",
						"type": "Spark",
						"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\n",
							"spark.sql(\"DROP DATABASE IF EXISTS default CASCADE\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"Drop TABLE talenlyfttracking"
						],
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a1395937-b991-4844-a1e8-78b3b9c6e594"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"SELECT * FROM `capstone`.`cohortform`\")\n",
							"# df.show(10)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NotebookTalentLyft')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Capstone",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "81570a7f-e226-4464-b03f-47d069d89355"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
						"name": "Capstone",
						"type": "Spark",
						"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"#loading applications.csv to dataframe\r\n",
							"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/applications.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True\r\n",
							")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"#loading CohortTableList.parquet to dataframe\r\n",
							"dg = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortTableList.parquet', format='parquet')\r\n",
							"dg = dg.drop('Title')\r\n",
							"\r\n",
							"#loading CohortForm.parquet to dataframe\r\n",
							"dh = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortForm.parquet', format='parquet')\r\n",
							"\r\n",
							"#loading Talentlist.parquet to dataframe\r\n",
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"# removing delimiters, change the case to lower, and directly apply to column Job in dataframe \r\n",
							"df = df.withColumn(\"Job\",lower(translate(col(\"Job\"),\"./–!-() \",\"\")))\r\n",
							"\r\n",
							"# removing delimiters, change the case to lower, rename JobDescription to Job, and directly apply now \r\n",
							"dg = dg.withColumn(\"JobDesc\",lower(translate(col(\"JobDescription\"),\"./–!-() \",\"\")) )\r\n",
							"\r\n",
							"# extract Year and Week in AppliedOrSourcedDate from applications dataframe\r\n",
							"df = df.withColumn(\"Year\", year(to_date(df.AppliedOrSourcedDate,\"M/d/y\"))) \\\r\n",
							".withColumn(\"Week\", weekofyear(to_date(df.AppliedOrSourcedDate, \"M/d/y\")))\r\n",
							"\r\n",
							"#<-- join tables to create a flat file applications dataframe-->\r\n",
							"\r\n",
							"#select two columns in TalentList\r\n",
							"dj = dj.select(\"Id\", \"Title\")\r\n",
							"dj = dj.withColumnRenamed(\"Title\", \"AcctMngr\")\r\n",
							"#join tables CohortTableList and TalentList\r\n",
							"dq = dg.join(dj, dg.AcctMngrId==dj.Id,\"left\").drop(dj.Id)\r\n",
							"#select two columns in CohortForm\r\n",
							"dh = dh.select(\"Id\", \"Title\")\r\n",
							"dh = dh.withColumnRenamed(\"Title\",\"CohortName\")\r\n",
							"#join tables CohortTableList and CohortForm\r\n",
							"da = dq.join(dh, dq.CohortNameId==dh.Id,\"left\")\r\n",
							"da = da.distinct()\r\n",
							"#join tables Applications and CohortTableList\r\n",
							"ds = df.join(da,df.Job==da.JobDesc,\"left\")\r\n",
							"##ds = ds.withColumnRenamed(\"Title\",\"CohortName\")\r\n",
							"##display(ds.limit(5))\r\n",
							"\r\n",
							"# re-initiate TalentList to dataframe\r\n",
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"dj = dj.select(\"Title\")\r\n",
							"dj = dj.withColumnRenamed(\"Title\",\"TA\")\r\n",
							"\r\n",
							"#join tables Applications and TalentList\r\n",
							"ds = ds.join(dj,ds.SourceSubType==dj.TA,\"left\")\r\n",
							"\r\n",
							"#choose between fields to impose if sourcesubtype is equal to TA field in TalentList\r\n",
							"ds = ds.withColumn(\"FinalTA\", when(ds.SourceSubType == ds.TA,ds.SourceSubType).otherwise(ds.AcctMngr))\r\n",
							"\r\n",
							"\r\n",
							"#re-intitiate an instance of TalentList to dataframe\r\n",
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"dj = dj.select(\"Title\",\"PictureURL\")\r\n",
							"dj = dj.withColumnRenamed(\"Title\",\"TA\")\r\n",
							"\r\n",
							"#join Applications and TalentList dataframes\r\n",
							"ds = ds.join(dj,ds.FinalTA==dj.TA,\"left\").drop(ds.TA)\r\n",
							"ds = ds.withColumnRenamed(\"PictureURL\",\"FinalTAPicUrl\")\r\n",
							"#<-----\r\n",
							"#drop unwanted fields that occured during the join\r\n",
							"ds = ds.drop(\"ContentTypeID\", \"ContentType\",\"Modified\",\"Created\", \"CreatedById\", \"ModifiedById\", \\\r\n",
							"\"Owshiddenversion\", \"Version\", \"Path\", \"ComplianceAssetId\")\r\n",
							"#<-- end of join tables to create a flat file applications dataframe-->\r\n",
							"\r\n",
							"#define HTD terms from Stage column in Applications dataframe\r\n",
							"ds = ds.withColumn(\"TrackerType\", when((ds.Stage == \"Sourced\") | (ds.Stage == \"Applied\") , \"Reach\")\r\n",
							".when((ds.Stage == \"Screen\") | (ds.Stage == \"Assessment\"), \"Test\") \r\n",
							".when((ds.Stage == \"Interview\"), \"Interview\") \r\n",
							".when((ds.Stage == \"Shortlisted\") | (ds.Stage == \"Offer\"), \"Offer\") \r\n",
							".when((ds.Stage == \"Hired\"), \"Conversion\") \r\n",
							".otherwise(\"\"))\r\n",
							"\r\n",
							"#create HTD (Reach, Test, Interview, Offer, Conversion) columns and assign values 1 on parameters TrackerType \r\n",
							"# and CohortName\r\n",
							"ds = ds.withColumn(\"Reach\", when((ds.TrackerType == \"Reach\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Test\", when((ds.TrackerType == \"Test\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Interview\", when((ds.TrackerType == \"Interview\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Offer\", when((ds.TrackerType == \"Offer\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							".withColumn(\"Conversion\", when((ds.TrackerType == \"Conversion\") & (ds.CohortName.isNotNull()), \"1\").otherwise(\"0\")) \\\r\n",
							"\r\n",
							"#drop columns\r\n",
							"ds = ds.drop(\"id\", \"JobDesc\" )\r\n",
							"ds = ds.distinct()\r\n",
							"\r\n",
							"#save Applications flat file dataframe as a table in capstone lake database\r\n",
							"ds = ds.repartition(1)\r\n",
							"ds.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.applications\")\r\n",
							"\r\n",
							"#re-initiate CohortTableList dataframe and save as a table in capstone lake database\r\n",
							"dg = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortTableList.parquet', format='parquet')\r\n",
							"dg.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.CohortTableList\")\r\n",
							"\r\n",
							"#re-initiate CohortForm dataframe and save as a table in capstone lake database\r\n",
							"dh = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortForm.parquet', format='parquet')\r\n",
							"dh.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.CohortForm\")\r\n",
							"\r\n",
							"#re-initiate TalentList dataframe and save as a table in capstone lake database\r\n",
							"dj = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/TalentList.parquet', format='parquet')\r\n",
							"dj.write.mode(\"overwrite\") \\\r\n",
							".saveAsTable(\"capstone.TalentList\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##ds = ds.repartition(1)\r\n",
							"##ds.write.mode(\"overwrite\").parquet(\"/capstone/output/tblapplications\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##%%sql\r\n",
							"##DROP TABLE capstone.applications"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##Drop  table in the default database\r\n",
							"##%%sql\r\n",
							"##DROP TABLE applications"
						],
						"outputs": [],
						"execution_count": 32
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RomanNotebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Capstone",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3477e983-6da9-4034-8047-bfefc15bd13e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/digitalmarketingmark/providers/Microsoft.Synapse/workspaces/marksynapseworkspace/bigDataPools/Capstone",
						"name": "Capstone",
						"type": "Spark",
						"endpoint": "https://marksynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Capstone",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/applications.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True)\r\n",
							"ctl_tbl = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortTableList.parquet', format='parquet')\r\n",
							"cfrm_tbl = spark.read.load('abfss://dlsg2markfilesystem@synapsedlakestgen2mark.dfs.core.windows.net/capstone/output/CohortForm.parquet', format='parquet')\r\n",
							"display(df.limit(10))\r\n",
							"df.count()"
						],
						"outputs": [],
						"execution_count": 107
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"df = df.withColumn(\"Job\",lower(translate(col(\"Job\"),\"./–!-() \",\"\")))\r\n",
							"ctl_tbl = ctl_tbl.withColumn(\"JobDescription\",lower(translate(col(\"JobDescription\"),\"./–!-() \",\"\")))\r\n",
							"display(df.limit(5))\r\n",
							"display(ctl_tbl.limit(5))"
						],
						"outputs": [],
						"execution_count": 108
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"\r\n",
							"cfrm_tbl = cfrm_tbl.select(\"Id\",\"Title\")\r\n",
							"ctl_tbl = ctl_tbl.select(\"CohortNameId\",\"JobDescription\",\"AcctMngrId\")\r\n",
							"join_cfctl=ctl_tbl.join(cfrm_tbl,ctl_tbl.CohortNameId == cfrm_tbl.Id,\"left\").drop_duplicates()\r\n",
							"\r\n",
							"join_cfctl=join_cfctl.select(\"AcctMngrId\", \"JobDescription\",\"CohortNameId\",\"Id\",\"Title\")\r\n",
							"join_dfctl=df.join(join_cfctl,df.Job == join_cfctl.JobDescription,\"left\").drop_duplicates()\r\n",
							"\r\n",
							"display(join_dfctl.limit(5))\r\n",
							"display(join_cfctl.limit(5))\r\n",
							"join_dfctl.count()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 109
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"join_dfctl= join_dfctl.withColumn(\"Year\", year(to_date(join_dfctl.AppliedOrSourcedDate,\"M/d/y\"))) \\\r\n",
							"       .withColumn(\"Week\", weekofyear(to_date(join_dfctl.AppliedOrSourcedDate, \"M/d/y\"))) \\\r\n",
							".withColumn(\"TrackerType\", when((join_dfctl.Stage == \"Sourced\") | (join_dfctl.Stage == \"Applied\") , \"Reach\")\r\n",
							".when((join_dfctl.Stage == \"Screen\") | (join_dfctl.Stage == \"Assessment\"), \"Test\") \r\n",
							".when((join_dfctl.Stage == \"Interview\"), \"Interview\") \\\r\n",
							".when((join_dfctl.Stage == \"Shortlisted\") | (join_dfctl.Stage == \"Offer\"), \"Offer\") \r\n",
							".when((join_dfctl.Stage == \"Hired\"), \"Conversion\") \r\n",
							".otherwise(\"\"))\r\n",
							"display(join_dfctl.limit(5))\r\n",
							"join_dfctl.count()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 112
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"\r\n",
							"#abc=join_dfctl.select(\"Id\",\"Title\")\r\n",
							"abc=join_dfctl.where(\"Id<>'0'\")\r\n",
							"display(abc.limit(5))\r\n",
							"#display(TrackTbl.limit(5))\r\n",
							"abc=abc.groupBy(\"TrackerType\").agg(count(\"TrackerType\")).show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 136
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Capstone')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 10
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southeastasia"
		}
	]
}